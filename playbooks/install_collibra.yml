---
- name: Install Collibra Services
  hosts: collibra_servers
  become: yes
  roles:
    - collibra
  tasks:

    # Gather mount facts
    - name: Gather mount facts
      setup:
        filter: ansible_mounts

    # Check if /tmp is mounted with noexec
    - name: Check if /tmp is mounted with noexec
      debug:
        msg: "/tmp is mounted with noexec"
      when:
        - "'noexec' in item.options"
        - item.mount == '/tmp'
      loop: "{{ ansible_mounts }}"
      loop_control:
        label: "{{ item.mount }}"

    - name: Check if /tmp is not mounted with noexec
      debug:
        msg: "/tmp is not mounted with noexec"
      when:
        - "'noexec' not in item.options"
        - item.mount == '/tmp'
      loop: "{{ ansible_mounts }}"
      loop_control:
        label: "{{ item.mount }}"

    # Remove the noexec option if it is set
    - name: Remove noexec option from /etc/fstab for /tmp
      lineinfile:
        path: /etc/fstab
        regexp: '(\s)/tmp(\s+)(\S+)(.*)noexec(.*)'
        line: '\1/tmp\2\3\4\5'  # Removes 'noexec' from the matched line
      when:
        - "'noexec' in item.options"
        - item.mount == '/tmp'
      loop: "{{ ansible_mounts }}"
      loop_control:
        label: "{{ item.mount }}"

    # Remount /tmp to apply changes
    - name: Remount /tmp without noexec
      command: mount -o remount /tmp
      when:
        - "'noexec' in item.options"
        - item.mount == '/tmp'
      loop: "{{ ansible_mounts }}"
      loop_control:
        label: "{{ item.mount }}"

    # Copy files from your src to an installation location
    - name: Copy DGC installer to /tmp
      copy:
        src: "/usr/local/collibra/packages/dgc-linux-{{ dgc_version }}.sh"
        dest: "/tmp/dgc-linux-{{ dgc_version }}.sh"
        mode: '0755'

    - name: Run Collibra installation
      command: "/tmp/dgc-linux-{{ dgc_version }}.sh -- --config /tmp/silentInstall.json"

    # Only run the SELinux tasks if component_set is AGENT
    - name: Change SELinux context for Collibra agent binary
      command: chcon -t bin_t /opt/collibra/agent/bin/agent
      when: "'AGENT' in component_set"

    - name: Add SELinux file context for Collibra agent binary
      command: semanage fcontext -a -t bin_t /opt/collibra/agent/bin/agent
      when: "'AGENT' in component_set"

    - name: Restore SELinux context for Collibra agent binary
      command: restorecon -v /opt/collibra/agent/bin/agent
      when: "'AGENT' in component_set"

    # Only run the SELinux tasks if component_set is CONSOLE
    - name: Change SELinux context for Collibra agent binary
      command: chcon -t bin_t /opt/collibra/agent/bin/agent
      when: "'CONSOLE' in component_set"

    - name: Add SELinux file context for Collibra agent binary
      command: semanage fcontext -a -t bin_t /opt/collibra/agent/bin/agent
      when: "'CONSOLE' in component_set"

    - name: Restore SELinux context for Collibra agent binary
      command: restorecon -v /opt/collibra/agent/bin/agent
      when: "'CONSOLE' in component_set"
